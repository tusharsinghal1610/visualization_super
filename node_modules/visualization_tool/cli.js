#!/usr/bin/env node
const [, , ...args] = process.argv;
var readJson = require('read-package-json');
var fs = require('fs');
var currentDir = process.cwd();
var Graph = require("./graph");
var mygraph = new Graph();
var exec = require('child_process').exec;

var readPackageJson = function (path) {
    return new Promise((resolve, reject) => {
        readJson(path + '/package.json', console.error, false, async function (er, data) {
            if (er) {
                console.log(er);
                console.error("There was an error reading the package.json file")
                return
            }
            else {
                resolve(data);
               // console.log('the package data is', data);
            }
        });
    });
}


var updatePackage = async (path,package) => {
   let command="cd "+path +" && npm version "
    if (args[1] == 'patch') {
        command = command + "patch";
    }
    else if (args[1] == 'minor') {
        command = command + "minor";
    }
    else if (args[1] == 'major') {
        command = command + "major";
    }
    else {
        console.log("invalid command");
        return;
    }
    if(package.child == null){
        command = command + ' -m "Updated '+ args[1] +'version"';
    }
    else{
        command = command + ' -m "Updated due to '+ args[1] +' update on a dependency"' + package.child;
    }
    
    exec(command,(error,stdout,stderr)=>{
        if(error || stderr){
            console.log(error||stderr);
        }
        else{
            console.log("successful")
            exec("rm -r temptushar"+package.parent,(error,stdout,stderr)=>{
            console.log("deleted");
            })    
        }
    })
}


updateByInstalling = function (package, path) {
    let command = "cd " + path + "/ && npm i --prefix ./ " + package.parent;
    exec(command, (error, stdout, stderr) => {
            let newPath = path + "/node_modules/" + package.parent;
            //console.log(newPath);
            updatePackage(newPath,package);
    });
}
processPackage = function (path, package) {
    let newPath = path + "/temptushar" + package.parent;
    let command = "cd " + path + "/ && mkdir temptushar" + package.parent;
    exec(command, (error, stdout, stderr) => {
        updateByInstalling(package, newPath);
    })
}
var mainFun = async function () {
    await mygraph.buildGraph(["number_multiplier"]);
    mygraph.generateNodesAndEdges();
    var mainPackage = await readPackageJson(currentDir);
    var dependents = mygraph.getDependents(mainPackage._id);
    if (args[0] == 'u') {
        updatePackage(currentDir,{parent:mainPackage._id,child:null});
        dependents.map((item) => {
            processPackage(currentDir, item);
        })
    }
}

mainFun();
